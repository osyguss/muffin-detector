name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Lint und Code Quality
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy safety
    
    - name: Run Black (Code Formatting)
      run: black --check --diff .
    
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff .
    
    - name: Run Flake8 (Linting)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run MyPy (Type Checking)
      run: mypy . --ignore-missing-imports || echo "MyPy warnings found"
    
    - name: Check for known security vulnerabilities
      run: safety check || echo "Security vulnerabilities found"

  # Unit Tests
  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx coverage
    
    - name: Run unit tests
      env:
        HF_TOKEN: fake_token_for_testing
        HF_ENDPOINT_URL: https://fake-endpoint-for-testing.com
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Docker Build und Test (DEAKTIVIERT für schnellere CI)
  # Wird nur in CD Pipeline ausgeführt
  # docker-build:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #   
  #   - name: Build Docker image for testing
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       push: false
  #       tags: muffin-detector:test
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max
  #   
  #   - name: Test Docker container
  #     run: |
  #       docker run -d --name test-container -p 8000:8000 muffin-detector:test
  #       sleep 10
  #       curl -f http://localhost:8000/health || exit 1
  #       docker stop test-container
  #       docker rm test-container

  # Integration Tests
  integration:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start service for integration tests
      env:
        HF_TOKEN: fake_token_for_testing
        HF_ENDPOINT_URL: https://fake-endpoint-for-testing.com
      run: |
        echo "Starting service in background with mock HF credentials..."
        python app.py &
        SERVICE_PID=$!
        echo "SERVICE_PID=$SERVICE_PID" >> $GITHUB_ENV
        
        # Wait for service to start
        echo "Waiting for service to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/health 2>/dev/null; then
            echo "✅ Service is ready!"
            break
          fi
          echo "Attempt $i: Service not ready yet..."
          sleep 2
        done
    
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health
        
        # Test root endpoint
        echo "Testing root endpoint..."
        curl -f http://localhost:8000/
        
        # Test docs endpoint
        echo "Testing docs endpoint..."
        curl -f http://localhost:8000/docs
        
        echo "✅ Integration tests passed!"
    
    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$SERVICE_PID" ]; then
          echo "Stopping service..."
          kill $SERVICE_PID || true
        fi

  # Summary job
  ci-summary:
    runs-on: ubuntu-latest
    needs: [lint, test, integration]
    if: always()
    steps:
    - name: CI Summary
      run: |
        echo "## 📊 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.lint.result }}" == "success" ]; then
          echo "✅ Code quality: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code quality: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ Unit tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Docker tests deaktiviert für schnellere CI
        echo "⏭️ Docker tests: Skipped (nur in CD Pipeline)" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.integration.result }}" == "success" ]; then
          echo "✅ Integration tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Ready for deployment!** All CI checks passed." >> $GITHUB_STEP_SUMMARY
