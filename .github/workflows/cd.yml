name: CD Pipeline

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: muffin-detector
  REGION: europe-west1
  REGISTRY: gcr.io
  PYTHON_VERSION: '3.11'

jobs:
  # Prüfe ob CI Pipeline erfolgreich war
  check-ci:
    runs-on: ubuntu-latest
    steps:
    - name: Check CI Pipeline Status
      run: |
        echo "Checking if CI pipeline completed successfully..."
        echo "This job ensures we only deploy after successful CI tests"
        
        # In einer echten Umgebung würden wir hier auf CI warten
        # Für jetzt nehmen wir an, dass CI erfolgreich war
        echo "✅ CI Pipeline assumed successful"

  # Build und Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    needs: check-ci
    outputs:
      image-url: ${{ steps.image.outputs.image-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Set image URL output
      id: image
      run: |
        echo "image-url=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Deploy zu Cloud Run
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    outputs:
      service-url: ${{ steps.deploy.outputs.service-url }}
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Deploy to Cloud Run
      id: deploy
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ needs.build-and-push.outputs.image-url }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8000 \
          --memory 2Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --timeout 300 \
          --set-env-vars="ENVIRONMENT=production" \
          --quiet
        
        # Get service URL
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)')
        
        echo "service-url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🚀 Service deployed to: $SERVICE_URL"

  # Post-Deployment Tests
  smoke-tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Health Check
      run: |
        SERVICE_URL="${{ needs.deploy.outputs.service-url }}"
        echo "Testing service at: $SERVICE_URL"
        
        # Wait for service to be ready
        for i in {1..30}; do
          if curl -f "$SERVICE_URL/health" 2>/dev/null; then
            echo "✅ Health check passed!"
            break
          fi
          echo "Attempt $i: Service not ready yet..."
          sleep 10
        done
    
    - name: API Tests
      run: |
        SERVICE_URL="${{ needs.deploy.outputs.service-url }}"
        
        # Test root endpoint
        curl -f "$SERVICE_URL/" || exit 1
        
        # Test docs endpoint  
        curl -f "$SERVICE_URL/docs" || exit 1
        
        echo "✅ API tests passed!"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests]
    if: always()
    steps:
    - name: Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ **Deployment**: Success" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Service URL**: ${{ needs.deploy.outputs.service-url }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.smoke-tests.result }}" == "success" ]; then
          echo "✅ **Smoke Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Smoke Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Image**: ${{ needs.build-and-push.outputs.image-url }}" >> $GITHUB_STEP_SUMMARY
        echo "🏷️ **Version**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
