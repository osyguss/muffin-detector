name: CI/CD Pipeline

on:
  # Temporarily disable automatic triggers for CD
  # push:
  #   branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  # Manual trigger only
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: muffin-detector
  REGION: europe-west1
  PYTHON_VERSION: '3.11'

jobs:
  # Lint und Code Quality
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
    
    - name: Run Black (Code Formatting)
      run: black --check --diff .
    
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff .
    
    - name: Run Flake8 (Linting)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run MyPy (Type Checking)
      run: mypy . --ignore-missing-imports || echo "MyPy warnings found"
    
    - name: Run Bandit (Security Linting)
      run: bandit -r . -x tests/ || echo "Security warnings found"
    
    - name: Check for known security vulnerabilities
      run: safety check || echo "Security vulnerabilities found"

  # Unit Tests
  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx coverage
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Docker Build und Security Scan
  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: muffin-detector:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'muffin-detector:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Test Docker container
      run: |
        docker run --rm -d --name test-container -p 8000:8000 muffin-detector:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container
        echo "Docker container test successful!"

  # Deployment zu Google Cloud Run (DEAKTIVIERT f√ºr CI-Tests)
  # deploy:
  #   needs: [test, docker-build]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
  #   environment: production
  #   
  #   steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build and tag Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Push Docker image to GCR
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 1 \
          --timeout 300 \
          --max-instances 10 \
          --min-instances 0 \
          --concurrency 80 \
          --set-env-vars="ENVIRONMENT=production,VERSION=$GITHUB_SHA" \
          --labels="app=muffin-detector,version=$GITHUB_SHA,environment=production"
    
    - name: Get service URL
      id: deploy
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Service deployed at: $SERVICE_URL"
    
    - name: Wait for deployment to be ready
      run: |
        echo "Waiting for service to be ready..."
        for i in {1..30}; do
          if curl -f ${{ steps.deploy.outputs.service_url }}/health; then
            echo "Service is ready!"
            break
          fi
          echo "Attempt $i: Service not ready yet, waiting..."
          sleep 10
        done
    
    - name: Run smoke tests
      run: |
        SERVICE_URL=${{ steps.deploy.outputs.service_url }}
        
        # Health check
        echo "Testing health endpoint..."
        curl -f $SERVICE_URL/health
        
        # API documentation
        echo "Testing docs endpoint..."
        curl -f $SERVICE_URL/docs
        
        echo "Deployment smoke tests successful!"
    
    - name: Create GitHub deployment
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Deployed to Google Cloud Run',
            auto_merge: false
          });
          
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: '${{ steps.deploy.outputs.service_url }}',
            description: 'Deployment successful'
          });

  # Notification Job
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üöÄ Service URL: ${{ needs.deploy.outputs.service_url }}"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi
