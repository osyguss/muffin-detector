name: Continuous Integration

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ develop, feature/* ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Pre-commit checks
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
    
    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
    
    - name: Run pre-commit
      run: pre-commit run --all-files || echo "Pre-commit checks completed"

  # Code quality checks
  quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
        pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: |
        echo "Checking code formatting..."
        black --check --diff . || (echo "❌ Code formatting issues found. Run 'black .' to fix." && exit 1)
    
    - name: Check import sorting with isort
      run: |
        echo "Checking import sorting..."
        isort --check-only --diff . || (echo "❌ Import sorting issues found. Run 'isort .' to fix." && exit 1)
    
    - name: Lint with flake8
      run: |
        echo "Running flake8 linting..."
        flake8 . --statistics
    
    - name: Type checking with MyPy
      run: |
        echo "Running type checking..."
        mypy . --ignore-missing-imports || echo "⚠️ Type checking completed with warnings"
    
    - name: Security linting with Bandit
      run: |
        echo "Running security checks..."
        bandit -r . -x tests/ -f json -o bandit-report.json || echo "⚠️ Security warnings found"
        bandit -r . -x tests/ || echo "⚠️ Security scan completed"
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
    
    - name: Check for known vulnerabilities
      run: |
        echo "Checking for known vulnerabilities..."
        safety check --json --output safety-report.json || echo "⚠️ Vulnerability check completed"
        safety check || echo "⚠️ Known vulnerabilities found"
    
    - name: Upload Safety results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-report
        path: safety-report.json

  # Unit tests with coverage
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx coverage
    
    - name: Run tests with coverage
      run: |
        echo "Running tests with Python ${{ matrix.python-version }}..."
        python -m pytest tests/ -v \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          --junitxml=pytest-results-${{ matrix.python-version }}.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: pytest-results-${{ matrix.python-version }}.xml
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.11'
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Integration tests
  integration:
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start service for integration tests
      run: |
        echo "Starting service in background..."
        python app.py &
        SERVICE_PID=$!
        echo "SERVICE_PID=$SERVICE_PID" >> $GITHUB_ENV
        
        # Wait for service to start
        echo "Waiting for service to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/health 2>/dev/null; then
            echo "✅ Service is ready!"
            break
          fi
          echo "Attempt $i: Service not ready yet..."
          sleep 2
        done
    
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health
        
        # Test root endpoint
        echo "Testing root endpoint..."
        curl -f http://localhost:8000/
        
        # Test docs endpoint
        echo "Testing docs endpoint..."
        curl -f http://localhost:8000/docs
        
        echo "✅ Integration tests passed!"
    
    - name: Cleanup
      if: always()
      run: |
        if [ ! -z "$SERVICE_PID" ]; then
          echo "Stopping service..."
          kill $SERVICE_PID || true
        fi

  # Docker build test
  docker-test:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: muffin-detector:ci-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        
        # Start container
        docker run -d --name test-container -p 8000:8000 muffin-detector:ci-test
        
        # Wait for container to be ready
        echo "Waiting for container to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8000/health 2>/dev/null; then
            echo "✅ Container is ready!"
            break
          fi
          echo "Attempt $i: Container not ready yet..."
          sleep 2
        done
        
        # Test endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/
        
        # Stop container
        docker stop test-container
        docker rm test-container
        
        echo "✅ Docker tests passed!"

  # Summary job
  ci-summary:
    runs-on: ubuntu-latest
    needs: [pre-commit, quality, test, integration, docker-test]
    if: always()
    steps:
    - name: CI Summary
      run: |
        echo "## 📊 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.pre-commit.result }}" == "success" ]; then
          echo "✅ Pre-commit checks: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Pre-commit checks: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.quality.result }}" == "success" ]; then
          echo "✅ Code quality: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code quality: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ Unit tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration.result }}" == "success" ]; then
          echo "✅ Integration tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.docker-test.result }}" == "success" ]; then
          echo "✅ Docker tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Docker tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Artifacts:** Check the artifacts section for detailed reports" >> $GITHUB_STEP_SUMMARY
